[Composition Rules]
# Question mark means abstract type.
value = ?
# Literals are expressed by their regexes.
number(value) = /\d+(\.\d+)/
bool(value) = /true|false/
null(value) = /null/
string(value) = /.+/
# Lists of values are represented by the child type followed by a star.
array(value) = value*
# Structures with fixed number and type of children represent the types
# separated by space.
assignment = string value
object(value) = assignment*

[Defaults]
# The default value of each type is represented by some tree in XML.
value = <string>value<string>
number = <number>0</number>
bool = <bool>true</bool>
null = <null>null</null>
string = <string>value</string>
array = <array></array>
assignment = <assignment><string>key</string><string>value</string></assignment>
object = <object></object>

[Output Templates]
# Templates define how each node is printed.
# Output templates are used to write the final code that is written to disk.
# {}'s are replaced by the values, use {{ or }} for the literal characters.
number = {}
bool = {}
null = {}
string = "{}"
array = [{}\n]
assignment = {}: {}
object = {{{}\n}}

[Display Templates]
# Display templates are used to print the tree to the user.
# When not specified, a node's display template defaults to its output template.

[Hotkeys]
# Keyboard keys used to insert each node type.
number = n
bool = b
null = n
string = s
array = l
assignment = a
object = o

[Style]
# References to the syntax styles in theme.ini.
number = constant
bool = constant
null = constant
string = constant
array = literal
assignment = declaration
object = literal